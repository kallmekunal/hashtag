<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:aop = "http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	    http://www.springframework.org/schema/aop 
   		http://www.springframework.org/schema/aop/spring-aop-4.0.xsd ">
		

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />
	<!-- Enable AspectJ style of Spring AOP -->
	<aop:aspectj-autoproxy />
	<context:component-scan base-package="com.kunal.project" />

	<tx:annotation-driven transaction-manager="transactionManager"/>

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>

	<beans:bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<beans:property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<beans:property name="url" value="jdbc:mysql://localhost:3306/test_db" />
		<beans:property name="username" value="root" />
		<beans:property name="password" value="" />
	</beans:bean>
	
	<!-- Hibernate 4 SessionFactory Bean definition -->
	<beans:bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />
		<beans:property name="annotatedClasses">
			<beans:list>
				<beans:value>com.kunal.project.db.UserInfo</beans:value>
			</beans:list>
		</beans:property>
		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect
				</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
				 <beans:prop key="hibernate.hbm2ddl.auto">create</beans:prop>
			</beans:props>
		</beans:property>
		
	</beans:bean>
	
	
	<beans:bean id="userInfoDao" class="com.kunal.project.dao.UserInfoDaoImpl">
		<beans:property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</beans:bean>
	<beans:bean id="userInfoService" class="com.kunal.project.service.UserInfoServiceImpl">
		<beans:property name="userInfoDao" ref="userInfoDao"></beans:property>
	</beans:bean>
	
	<beans:bean id="userInfoValidator" class="com.kunal.project.validators.UserInfoValidator" />
	
	<beans:bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter">
		<beans:property name="messageConverters">
			<beans:list>
				<beans:ref bean="jsonMessageConverter"/>
			</beans:list>
		</beans:property>
	</beans:bean>
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
       <beans:property name="basename" value="message" />
		<beans:property name="defaultEncoding" value="UTF-8" />
    </beans:bean>
	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<beans:bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
	</beans:bean>
	
	
	<!-- Configure Aspect Beans, without this Aspects advices wont execute -->
	<beans:bean name="userInfoServiceAspect" class="com.kunal.project.aspect.UserInfoServiceAspect" />
	
	
	
	
	<aop:config>
   <aop:aspect id = "myAspect" ref = "userInfoServiceAspect">
      <aop:pointcut id = "userInfoServicepc"
         expression = "execution(* com.kunal.project.service.*.*(..))"/>

      <!-- a before advice definition -->
      <aop:before pointcut-ref = "userInfoServicepc" method = "addUserInfoAdvice"/>
<!-- 
      an after advice definition
      <aop:after pointcut-ref = "businessService" method = "doRequiredTask"/>

      an after-returning advice definition
      The doRequiredTask method must have parameter named retVal
      <aop:after-returning pointcut-ref = "businessService"
         returning = "retVal" method = "doRequiredTask"/>

      an after-throwing advice definition
      The doRequiredTask method must have parameter named ex
      <aop:after-throwing pointcut-ref = "businessService"
         throwing = "ex" method = "doRequiredTask"/>

      an around advice definition
      <aop:around pointcut-ref = "businessService" method = "doRequiredTask"/>
 -->   </aop:aspect>
</aop:config>

	
	
	
	
</beans:beans>
